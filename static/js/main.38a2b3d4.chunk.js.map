{"version":3,"sources":["Component/Egypt.js","Component/Global.js","App.js","serviceWorker.js","index.js"],"names":["Egypt","props","className","newConfirmed","newDeaths","newRecovered","totalConfirmed","totalDeath","totalRecovered","Global","App","getCases","a","fetch","apiCall","json","data","console","log","NewConfirmed","setState","Countries","NewDeaths","NewRecovered","TotalConfirmed","totalDeaths","TotalDeaths","TotalRecovered","NewConfirmedGlobal","newDeathsGlobal","newRecoveredGlobal","totalConfirmedGlobal","totalDeathsGlobal","totalRecoveredGlobal","loading","state","undefined","Date","this","toDateString","window","onload","newConfirmedGlobal","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.38a2b3d4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Egypt = (props)=>{\r\n    return(\r\n       \r\n        <div>\r\n            <div className='newcomfirmed'>\r\n                New Confirmed : <span className='val'>{props.newConfirmed}</span> \r\n            </div> <br/>\r\n\r\n            <div className='newdeaths'>\r\n                New Deaths :<span className='val'>{props.newDeaths}</span> \r\n            </div> <br/>\r\n\r\n            <div className = 'newrecovered'>\r\n                New Recovered :<span className='val'> {props.newRecovered}</span> \r\n            </div> <br/>\r\n\r\n            <div className='newcomfirmed'>\r\n                Total Confirmed :<span className='val'> {props.totalConfirmed}</span>\r\n             </div> <br/>\r\n\r\n            <div className='newdeaths'>\r\n                Total Deaths :<span className='val'> {props.totalDeath}</span> \r\n            </div> <br/>\r\n            \r\n            <div className = 'newrecovered'>\r\n                Total Recovered :<span className='val'>{props.totalRecovered}</span> \r\n            </div> <br/>\r\n            \r\n\r\n        </div> \r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Egypt\r\n/*\r\nCountry: \"Egypt\"\r\nCountryCode: \"EG\"\r\nDate: \"2020-05-10T03:15:50Z\"\r\nNewConfirmed: 0\r\nNewDeaths: 0\r\nNewRecovered: 0\r\nSlug: \"egypt\"\r\nTotalConfirmed: 8476\r\nTotalDeaths: 503\r\nTotalRecovered: 1945\r\n*/","import React from'react'\r\n\r\nconst Global = (props)=>{\r\n    return(\r\n        <div>\r\n            <div className='newcomfirmed'>\r\n                New Confirmed : <span className='val'>{props.newConfirmed}</span> \r\n            </div> <br/>\r\n\r\n            <div className='newdeaths'>\r\n                New Deaths :<span className='val'>{props.newDeaths}</span> \r\n            </div> <br/>\r\n\r\n            <div className = 'newrecovered'>\r\n                New Recovered :<span className='val'> {props.newRecovered}</span> \r\n            </div> <br/>\r\n\r\n            <div className='newcomfirmed'>\r\n                Total Confirmed :<span className='val'> {props.totalConfirmed}</span>\r\n             </div> <br/>\r\n\r\n            <div className='newdeaths'>\r\n                Total Deaths :<span className='val'> {props.totalDeath}</span> \r\n            </div> <br/>\r\n            \r\n            <div className = 'newrecovered'>\r\n                Total Recovered :<span className='val'>{props.totalRecovered}</span> \r\n            </div> <br/>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default Global\r\n/*Global:\r\nNewConfirmed: 0\r\nNewDeaths: 0\r\nNewRecovered: 0\r\nTotalConfirmed: 3928672\r\nTotalDeaths: 274425\r\nTotalRecovered: 1287101*/","import React, { Component } from 'react'; \nimport Egypt from './Component/Egypt'\nimport Global from './Component/Global'\n// import img1 from './hotline.jpg'\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state  = {\n      NewConfirmed : undefined,\n      newDeaths : undefined,\n      newRecovered : undefined,\n      totalConfirmed : undefined ,\n      totalDeaths : undefined,\n      totalRecovered : undefined,\n\n      NewConfirmedGlobal : undefined,\n      newDeathsGlobal : undefined,\n      newRecoveredGlobal : undefined,\n      totalConfirmedGlobal : undefined ,\n      totalDeathsGlobal : undefined,\n      totalRecoveredGlobal : undefined,\n      loading : false,\n      Date : new Date()\n    }\n  }\n\n  getCases = async() =>{\n    const apiCall = await fetch(`https://api.covid19api.com/summary`)\n    const data = await apiCall.json()\n    \n    console.log(data.Global.NewConfirmed)\n\n    this.setState({\n      newConfirmed : data.Countries[51].NewConfirmed,\n      newDeaths : data.Countries[51].NewDeaths,\n      newRecovered : data.Countries[51].NewRecovered,\n      totalConfirmed : data.Countries[51].TotalConfirmed ,\n      totalDeaths : data.Countries[51].TotalDeaths,\n      totalRecovered : data.Countries[51].TotalRecovered, \n\n      NewConfirmedGlobal : data.Global.NewConfirmed,\n      newDeathsGlobal : data.Global.NewDeaths,\n      newRecoveredGlobal : data.Global.NewRecovered,\n      totalConfirmedGlobal : data.Global.TotalConfirmed,\n      totalDeathsGlobal : data.Global.TotalDeaths,\n      totalRecoveredGlobal : data.Global.TotalRecovered,\n      loading : true\n    })\n\n  }\n  \n  \n\n  render() {\n    return (\n      <div className= 'container'>\n        <h1 className = 'covid_19'>COVID_19</h1>\n        <span>Date :  {this.state.Date.toDateString()} </span>\n        <div>{window.onload = this.getCases}</div>\n        {this.state.loading === false ? <h2>Loading Pls wait...</h2> :\n          <div>\n              <h2 className='placetitle'>NEW CASSES AROUND <span className='place'> THE WORLED</span> :</h2>\n              <div  className='globalcontainer'>\n                <Global\n                  newConfirmed = {this.state.newConfirmedGlobal}\n                  newDeaths = {this.state.newDeathsGlobal}\n                  newRecovered = {this.state.newRecoveredGlobal}\n                  totalConfirmed = {this.state.totalConfirmedGlobal}\n                  totalDeath ={this.state.totalDeathsGlobal}\n                  totalRecovered = {this.state.totalRecoveredGlobal}\n                />\n              </div>\n\n              <h2 className='placetitle'>NEW CASSES ON <span className='place'>Egypt</span> :</h2>\n              <div className= 'egyptcontainer'>\n                <Egypt \n                  newConfirmed = {this.state.newConfirmed}\n                  newDeaths = {this.state.newDeaths}\n                  newRecovered = {this.state.newRecovered}\n                  totalConfirmed = {this.state.totalConfirmed}\n                  totalDeath ={this.state.totalDeaths}\n                  totalRecovered = {this.state.totalRecovered}\n                />\n              </div>\n              <p>دورك جاي</p>\n          </div>\n        }      \n        \n        </div>\n    )\n  }\n     \n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}